// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.atreceno.it.diaulos.domain;

import com.atreceno.it.diaulos.domain.CountryDataOnDemand;
import com.atreceno.it.diaulos.domain.Participant;
import com.atreceno.it.diaulos.domain.ParticipantDataOnDemand;
import com.atreceno.it.diaulos.reference.Gender;
import com.atreceno.it.diaulos.repository.ParticipantRepository;
import com.atreceno.it.diaulos.service.ParticipantService;
import java.math.BigDecimal;
import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Date;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

privileged aspect ParticipantDataOnDemand_Roo_DataOnDemand {
    
    declare @type: ParticipantDataOnDemand: @Component;
    
    private Random ParticipantDataOnDemand.rnd = new SecureRandom();
    
    private List<Participant> ParticipantDataOnDemand.data;
    
    @Autowired
    CountryDataOnDemand ParticipantDataOnDemand.countryDataOnDemand;
    
    @Autowired
    ParticipantService ParticipantDataOnDemand.participantService;
    
    @Autowired
    ParticipantRepository ParticipantDataOnDemand.participantRepository;
    
    public Participant ParticipantDataOnDemand.getNewTransientParticipant(int index) {
        Participant obj = new Participant();
        setBirthDate(obj, index);
        setCode(obj, index);
        setEmail(obj, index);
        setFirstName(obj, index);
        setGender(obj, index);
        setHeight(obj, index);
        setImage(obj, index);
        setLastName(obj, index);
        setWeight(obj, index);
        return obj;
    }
    
    public void ParticipantDataOnDemand.setBirthDate(Participant obj, int index) {
        Date birthDate = new Date(new Date().getTime() - 10000000L);
        obj.setBirthDate(birthDate);
    }
    
    public void ParticipantDataOnDemand.setCode(Participant obj, int index) {
        String code = "code_" + index;
        obj.setCode(code);
    }
    
    public void ParticipantDataOnDemand.setEmail(Participant obj, int index) {
        String email = "foo" + index + "@bar.com";
        if (email.length() > 30) {
            email = email.substring(0, 30);
        }
        obj.setEmail(email);
    }
    
    public void ParticipantDataOnDemand.setFirstName(Participant obj, int index) {
        String firstName = "firstName_" + index;
        if (firstName.length() > 30) {
            firstName = firstName.substring(0, 30);
        }
        obj.setFirstName(firstName);
    }
    
    public void ParticipantDataOnDemand.setGender(Participant obj, int index) {
        Gender gender = Gender.class.getEnumConstants()[0];
        obj.setGender(gender);
    }
    
    public void ParticipantDataOnDemand.setHeight(Participant obj, int index) {
        BigDecimal height = BigDecimal.valueOf(index);
        if (height.compareTo(new BigDecimal("0.0")) == -1 || height.compareTo(new BigDecimal("299.99")) == 1) {
            height = new BigDecimal("299.99");
        }
        obj.setHeight(height);
    }
    
    public void ParticipantDataOnDemand.setImage(Participant obj, int index) {
        byte[] image = String.valueOf(index).getBytes();
        obj.setImage(image);
    }
    
    public void ParticipantDataOnDemand.setLastName(Participant obj, int index) {
        String lastName = "lastName_" + index;
        if (lastName.length() > 30) {
            lastName = lastName.substring(0, 30);
        }
        obj.setLastName(lastName);
    }
    
    public void ParticipantDataOnDemand.setWeight(Participant obj, int index) {
        BigDecimal weight = BigDecimal.valueOf(index);
        if (weight.compareTo(new BigDecimal("0.0")) == -1 || weight.compareTo(new BigDecimal("299.99")) == 1) {
            weight = new BigDecimal("299.99");
        }
        obj.setWeight(weight);
    }
    
    public Participant ParticipantDataOnDemand.getSpecificParticipant(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        Participant obj = data.get(index);
        Long id = obj.getId();
        return participantService.findParticipant(id);
    }
    
    public Participant ParticipantDataOnDemand.getRandomParticipant() {
        init();
        Participant obj = data.get(rnd.nextInt(data.size()));
        Long id = obj.getId();
        return participantService.findParticipant(id);
    }
    
    public boolean ParticipantDataOnDemand.modifyParticipant(Participant obj) {
        return false;
    }
    
    public void ParticipantDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = participantService.findParticipantEntries(from, to);
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'Participant' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<Participant>();
        for (int i = 0; i < 10; i++) {
            Participant obj = getNewTransientParticipant(i);
            try {
                participantService.saveParticipant(obj);
            } catch (ConstraintViolationException e) {
                StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getConstraintDescriptor()).append(":").append(cv.getMessage()).append("=").append(cv.getInvalidValue()).append("]");
                }
                throw new RuntimeException(msg.toString(), e);
            }
            participantRepository.flush();
            data.add(obj);
        }
    }
    
}
