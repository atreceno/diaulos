// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.atreceno.it.diaulos.domain;

import com.atreceno.it.diaulos.domain.ParticRace;
import com.atreceno.it.diaulos.domain.ParticRaceDataOnDemand;
import com.atreceno.it.diaulos.domain.Participant;
import com.atreceno.it.diaulos.domain.ParticipantDataOnDemand;
import com.atreceno.it.diaulos.domain.Phase;
import com.atreceno.it.diaulos.domain.PhaseDataOnDemand;
import com.atreceno.it.diaulos.repository.ParticRaceRepository;
import com.atreceno.it.diaulos.service.ParticRaceService;
import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

privileged aspect ParticRaceDataOnDemand_Roo_DataOnDemand {
    
    declare @type: ParticRaceDataOnDemand: @Component;
    
    private Random ParticRaceDataOnDemand.rnd = new SecureRandom();
    
    private List<ParticRace> ParticRaceDataOnDemand.data;
    
    @Autowired
    ParticipantDataOnDemand ParticRaceDataOnDemand.participantDataOnDemand;
    
    @Autowired
    PhaseDataOnDemand ParticRaceDataOnDemand.phaseDataOnDemand;
    
    @Autowired
    ParticRaceService ParticRaceDataOnDemand.particRaceService;
    
    @Autowired
    ParticRaceRepository ParticRaceDataOnDemand.particRaceRepository;
    
    public ParticRace ParticRaceDataOnDemand.getNewTransientParticRace(int index) {
        ParticRace obj = new ParticRace();
        setBib(obj, index);
        setLane(obj, index);
        setParticipant(obj, index);
        setPhase(obj, index);
        setRank(obj, index);
        setResult(obj, index);
        return obj;
    }
    
    public void ParticRaceDataOnDemand.setBib(ParticRace obj, int index) {
        Integer bib = new Integer(index);
        obj.setBib(bib);
    }
    
    public void ParticRaceDataOnDemand.setLane(ParticRace obj, int index) {
        String lane = "lane_" + index;
        obj.setLane(lane);
    }
    
    public void ParticRaceDataOnDemand.setParticipant(ParticRace obj, int index) {
        Participant participant = participantDataOnDemand.getRandomParticipant();
        obj.setParticipant(participant);
    }
    
    public void ParticRaceDataOnDemand.setPhase(ParticRace obj, int index) {
        Phase phase = phaseDataOnDemand.getRandomPhase();
        obj.setPhase(phase);
    }
    
    public void ParticRaceDataOnDemand.setRank(ParticRace obj, int index) {
        Integer rank = new Integer(index);
        obj.setRank(rank);
    }
    
    public void ParticRaceDataOnDemand.setResult(ParticRace obj, int index) {
        String result = "result_" + index;
        obj.setResult(result);
    }
    
    public ParticRace ParticRaceDataOnDemand.getSpecificParticRace(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        ParticRace obj = data.get(index);
        Long id = obj.getId();
        return particRaceService.findParticRace(id);
    }
    
    public ParticRace ParticRaceDataOnDemand.getRandomParticRace() {
        init();
        ParticRace obj = data.get(rnd.nextInt(data.size()));
        Long id = obj.getId();
        return particRaceService.findParticRace(id);
    }
    
    public boolean ParticRaceDataOnDemand.modifyParticRace(ParticRace obj) {
        return false;
    }
    
    public void ParticRaceDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = particRaceService.findParticRaceEntries(from, to);
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'ParticRace' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<ParticRace>();
        for (int i = 0; i < 10; i++) {
            ParticRace obj = getNewTransientParticRace(i);
            try {
                particRaceService.saveParticRace(obj);
            } catch (ConstraintViolationException e) {
                StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getConstraintDescriptor()).append(":").append(cv.getMessage()).append("=").append(cv.getInvalidValue()).append("]");
                }
                throw new RuntimeException(msg.toString(), e);
            }
            particRaceRepository.flush();
            data.add(obj);
        }
    }
    
}
