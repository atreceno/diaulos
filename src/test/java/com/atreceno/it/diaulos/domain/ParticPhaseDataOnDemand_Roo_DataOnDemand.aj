// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.atreceno.it.diaulos.domain;

import com.atreceno.it.diaulos.domain.ParticPhase;
import com.atreceno.it.diaulos.domain.ParticPhaseDataOnDemand;
import com.atreceno.it.diaulos.domain.Participant;
import com.atreceno.it.diaulos.domain.ParticipantDataOnDemand;
import com.atreceno.it.diaulos.domain.Phase;
import com.atreceno.it.diaulos.domain.PhaseDataOnDemand;
import com.atreceno.it.diaulos.repository.ParticPhaseRepository;
import com.atreceno.it.diaulos.service.ParticPhaseService;
import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

privileged aspect ParticPhaseDataOnDemand_Roo_DataOnDemand {
    
    declare @type: ParticPhaseDataOnDemand: @Component;
    
    private Random ParticPhaseDataOnDemand.rnd = new SecureRandom();
    
    private List<ParticPhase> ParticPhaseDataOnDemand.data;
    
    @Autowired
    ParticipantDataOnDemand ParticPhaseDataOnDemand.participantDataOnDemand;
    
    @Autowired
    PhaseDataOnDemand ParticPhaseDataOnDemand.phaseDataOnDemand;
    
    @Autowired
    ParticPhaseService ParticPhaseDataOnDemand.particPhaseService;
    
    @Autowired
    ParticPhaseRepository ParticPhaseDataOnDemand.particPhaseRepository;
    
    public ParticPhase ParticPhaseDataOnDemand.getNewTransientParticPhase(int index) {
        ParticPhase obj = new ParticPhase();
        setParticipant(obj, index);
        setPhase(obj, index);
        setQualified(obj, index);
        setRank(obj, index);
        setResult(obj, index);
        return obj;
    }
    
    public void ParticPhaseDataOnDemand.setParticipant(ParticPhase obj, int index) {
        Participant participant = participantDataOnDemand.getRandomParticipant();
        obj.setParticipant(participant);
    }
    
    public void ParticPhaseDataOnDemand.setPhase(ParticPhase obj, int index) {
        Phase phase = phaseDataOnDemand.getRandomPhase();
        obj.setPhase(phase);
    }
    
    public void ParticPhaseDataOnDemand.setQualified(ParticPhase obj, int index) {
        Boolean qualified = Boolean.TRUE;
        obj.setQualified(qualified);
    }
    
    public void ParticPhaseDataOnDemand.setRank(ParticPhase obj, int index) {
        Integer rank = new Integer(index);
        obj.setRank(rank);
    }
    
    public void ParticPhaseDataOnDemand.setResult(ParticPhase obj, int index) {
        String result = "result_" + index;
        obj.setResult(result);
    }
    
    public ParticPhase ParticPhaseDataOnDemand.getSpecificParticPhase(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        ParticPhase obj = data.get(index);
        Long id = obj.getId();
        return particPhaseService.findParticPhase(id);
    }
    
    public ParticPhase ParticPhaseDataOnDemand.getRandomParticPhase() {
        init();
        ParticPhase obj = data.get(rnd.nextInt(data.size()));
        Long id = obj.getId();
        return particPhaseService.findParticPhase(id);
    }
    
    public boolean ParticPhaseDataOnDemand.modifyParticPhase(ParticPhase obj) {
        return false;
    }
    
    public void ParticPhaseDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = particPhaseService.findParticPhaseEntries(from, to);
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'ParticPhase' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<ParticPhase>();
        for (int i = 0; i < 10; i++) {
            ParticPhase obj = getNewTransientParticPhase(i);
            try {
                particPhaseService.saveParticPhase(obj);
            } catch (final ConstraintViolationException e) {
                final StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    final ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getRootBean().getClass().getName()).append(".").append(cv.getPropertyPath()).append(": ").append(cv.getMessage()).append(" (invalid value = ").append(cv.getInvalidValue()).append(")").append("]");
                }
                throw new IllegalStateException(msg.toString(), e);
            }
            particPhaseRepository.flush();
            data.add(obj);
        }
    }
    
}
