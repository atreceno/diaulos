// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.atreceno.it.diaulos.domain;

import com.atreceno.it.diaulos.domain.Lap;
import com.atreceno.it.diaulos.domain.LapDataOnDemand;
import com.atreceno.it.diaulos.domain.ParticLap;
import com.atreceno.it.diaulos.domain.ParticLapDataOnDemand;
import com.atreceno.it.diaulos.domain.Participant;
import com.atreceno.it.diaulos.domain.ParticipantDataOnDemand;
import com.atreceno.it.diaulos.repository.ParticLapRepository;
import com.atreceno.it.diaulos.service.ParticLapService;
import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

privileged aspect ParticLapDataOnDemand_Roo_DataOnDemand {
    
    declare @type: ParticLapDataOnDemand: @Component;
    
    private Random ParticLapDataOnDemand.rnd = new SecureRandom();
    
    private List<ParticLap> ParticLapDataOnDemand.data;
    
    @Autowired
    LapDataOnDemand ParticLapDataOnDemand.lapDataOnDemand;
    
    @Autowired
    ParticipantDataOnDemand ParticLapDataOnDemand.participantDataOnDemand;
    
    @Autowired
    ParticLapService ParticLapDataOnDemand.particLapService;
    
    @Autowired
    ParticLapRepository ParticLapDataOnDemand.particLapRepository;
    
    public ParticLap ParticLapDataOnDemand.getNewTransientParticLap(int index) {
        ParticLap obj = new ParticLap();
        setLap(obj, index);
        setParticipant(obj, index);
        setRank(obj, index);
        setResult(obj, index);
        return obj;
    }
    
    public void ParticLapDataOnDemand.setLap(ParticLap obj, int index) {
        Lap lap = lapDataOnDemand.getRandomLap();
        obj.setLap(lap);
    }
    
    public void ParticLapDataOnDemand.setParticipant(ParticLap obj, int index) {
        Participant participant = participantDataOnDemand.getRandomParticipant();
        obj.setParticipant(participant);
    }
    
    public void ParticLapDataOnDemand.setRank(ParticLap obj, int index) {
        Integer rank = new Integer(index);
        obj.setRank(rank);
    }
    
    public void ParticLapDataOnDemand.setResult(ParticLap obj, int index) {
        String result = "result_" + index;
        obj.setResult(result);
    }
    
    public ParticLap ParticLapDataOnDemand.getSpecificParticLap(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        ParticLap obj = data.get(index);
        Long id = obj.getId();
        return particLapService.findParticLap(id);
    }
    
    public ParticLap ParticLapDataOnDemand.getRandomParticLap() {
        init();
        ParticLap obj = data.get(rnd.nextInt(data.size()));
        Long id = obj.getId();
        return particLapService.findParticLap(id);
    }
    
    public boolean ParticLapDataOnDemand.modifyParticLap(ParticLap obj) {
        return false;
    }
    
    public void ParticLapDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = particLapService.findParticLapEntries(from, to);
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'ParticLap' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<ParticLap>();
        for (int i = 0; i < 10; i++) {
            ParticLap obj = getNewTransientParticLap(i);
            try {
                particLapService.saveParticLap(obj);
            } catch (ConstraintViolationException e) {
                StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getConstraintDescriptor()).append(":").append(cv.getMessage()).append("=").append(cv.getInvalidValue()).append("]");
                }
                throw new RuntimeException(msg.toString(), e);
            }
            particLapRepository.flush();
            data.add(obj);
        }
    }
    
}
