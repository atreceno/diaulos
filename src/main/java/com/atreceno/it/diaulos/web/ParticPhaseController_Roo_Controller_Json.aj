// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.atreceno.it.diaulos.web;

import com.atreceno.it.diaulos.domain.ParticPhase;
import com.atreceno.it.diaulos.web.ParticPhaseController;
import java.util.List;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;

privileged aspect ParticPhaseController_Roo_Controller_Json {
    
    @RequestMapping(value = "/{id}", method = RequestMethod.GET, headers = "Accept=application/json")
    @ResponseBody
    public ResponseEntity<String> ParticPhaseController.showJson(@PathVariable("id") Long id) {
        ParticPhase particPhase = particPhaseService.findParticPhase(id);
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json; charset=utf-8");
        if (particPhase == null) {
            return new ResponseEntity<String>(headers, HttpStatus.NOT_FOUND);
        }
        return new ResponseEntity<String>(particPhase.toJson(), headers, HttpStatus.OK);
    }
    
    @RequestMapping(headers = "Accept=application/json")
    @ResponseBody
    public ResponseEntity<String> ParticPhaseController.listJson() {
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json; charset=utf-8");
        List<ParticPhase> result = particPhaseService.findAllParticPhases();
        return new ResponseEntity<String>(ParticPhase.toJsonArray(result), headers, HttpStatus.OK);
    }
    
    @RequestMapping(method = RequestMethod.POST, headers = "Accept=application/json")
    public ResponseEntity<String> ParticPhaseController.createFromJson(@RequestBody String json) {
        ParticPhase particPhase = ParticPhase.fromJsonToParticPhase(json);
        particPhaseService.saveParticPhase(particPhase);
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json");
        return new ResponseEntity<String>(headers, HttpStatus.CREATED);
    }
    
    @RequestMapping(value = "/jsonArray", method = RequestMethod.POST, headers = "Accept=application/json")
    public ResponseEntity<String> ParticPhaseController.createFromJsonArray(@RequestBody String json) {
        for (ParticPhase particPhase: ParticPhase.fromJsonArrayToParticPhases(json)) {
            particPhaseService.saveParticPhase(particPhase);
        }
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json");
        return new ResponseEntity<String>(headers, HttpStatus.CREATED);
    }
    
    @RequestMapping(value = "/{id}", method = RequestMethod.PUT, headers = "Accept=application/json")
    public ResponseEntity<String> ParticPhaseController.updateFromJson(@RequestBody String json, @PathVariable("id") Long id) {
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json");
        ParticPhase particPhase = ParticPhase.fromJsonToParticPhase(json);
        if (particPhaseService.updateParticPhase(particPhase) == null) {
            return new ResponseEntity<String>(headers, HttpStatus.NOT_FOUND);
        }
        return new ResponseEntity<String>(headers, HttpStatus.OK);
    }
    
    @RequestMapping(value = "/{id}", method = RequestMethod.DELETE, headers = "Accept=application/json")
    public ResponseEntity<String> ParticPhaseController.deleteFromJson(@PathVariable("id") Long id) {
        ParticPhase particPhase = particPhaseService.findParticPhase(id);
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json");
        if (particPhase == null) {
            return new ResponseEntity<String>(headers, HttpStatus.NOT_FOUND);
        }
        particPhaseService.deleteParticPhase(particPhase);
        return new ResponseEntity<String>(headers, HttpStatus.OK);
    }
    
}
