// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.atreceno.it.diaulos.web;

import com.atreceno.it.diaulos.domain.Country;
import com.atreceno.it.diaulos.domain.Participant;
import com.atreceno.it.diaulos.reference.Gender;
import com.atreceno.it.diaulos.service.ParticEventService;
import com.atreceno.it.diaulos.service.ParticLapService;
import com.atreceno.it.diaulos.service.ParticPhaseService;
import com.atreceno.it.diaulos.service.ParticRaceService;
import com.atreceno.it.diaulos.service.ParticipantService;
import com.atreceno.it.diaulos.web.ParticipantController;
import java.io.UnsupportedEncodingException;
import java.util.Arrays;
import javax.servlet.http.HttpServletRequest;
import javax.validation.Valid;
import org.joda.time.format.DateTimeFormat;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.i18n.LocaleContextHolder;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.util.UriUtils;
import org.springframework.web.util.WebUtils;

privileged aspect ParticipantController_Roo_Controller {
    
    @Autowired
    ParticipantService ParticipantController.participantService;
    
    @Autowired
    ParticEventService ParticipantController.particEventService;
    
    @Autowired
    ParticLapService ParticipantController.particLapService;
    
    @Autowired
    ParticPhaseService ParticipantController.particPhaseService;
    
    @Autowired
    ParticRaceService ParticipantController.particRaceService;
    
    @RequestMapping(method = RequestMethod.POST, produces = "text/html")
    public String ParticipantController.create(@Valid Participant participant, BindingResult bindingResult, Model uiModel, HttpServletRequest httpServletRequest) {
        if (bindingResult.hasErrors()) {
            populateEditForm(uiModel, participant);
            return "participants/create";
        }
        uiModel.asMap().clear();
        participantService.saveParticipant(participant);
        return "redirect:/participants/" + encodeUrlPathSegment(participant.getId().toString(), httpServletRequest);
    }
    
    @RequestMapping(params = "form", produces = "text/html")
    public String ParticipantController.createForm(Model uiModel) {
        populateEditForm(uiModel, new Participant());
        return "participants/create";
    }
    
    @RequestMapping(value = "/{id}", produces = "text/html")
    public String ParticipantController.show(@PathVariable("id") Long id, Model uiModel) {
        addDateTimeFormatPatterns(uiModel);
        uiModel.addAttribute("participant", participantService.findParticipant(id));
        uiModel.addAttribute("itemId", id);
        return "participants/show";
    }
    
    @RequestMapping(produces = "text/html")
    public String ParticipantController.list(@RequestParam(value = "page", required = false) Integer page, @RequestParam(value = "size", required = false) Integer size, Model uiModel) {
        if (page != null || size != null) {
            int sizeNo = size == null ? 10 : size.intValue();
            final int firstResult = page == null ? 0 : (page.intValue() - 1) * sizeNo;
            uiModel.addAttribute("participants", participantService.findParticipantEntries(firstResult, sizeNo));
            float nrOfPages = (float) participantService.countAllParticipants() / sizeNo;
            uiModel.addAttribute("maxPages", (int) ((nrOfPages > (int) nrOfPages || nrOfPages == 0.0) ? nrOfPages + 1 : nrOfPages));
        } else {
            uiModel.addAttribute("participants", participantService.findAllParticipants());
        }
        addDateTimeFormatPatterns(uiModel);
        return "participants/list";
    }
    
    @RequestMapping(method = RequestMethod.PUT, produces = "text/html")
    public String ParticipantController.update(@Valid Participant participant, BindingResult bindingResult, Model uiModel, HttpServletRequest httpServletRequest) {
        if (bindingResult.hasErrors()) {
            populateEditForm(uiModel, participant);
            return "participants/update";
        }
        uiModel.asMap().clear();
        participantService.updateParticipant(participant);
        return "redirect:/participants/" + encodeUrlPathSegment(participant.getId().toString(), httpServletRequest);
    }
    
    @RequestMapping(value = "/{id}", params = "form", produces = "text/html")
    public String ParticipantController.updateForm(@PathVariable("id") Long id, Model uiModel) {
        populateEditForm(uiModel, participantService.findParticipant(id));
        return "participants/update";
    }
    
    @RequestMapping(value = "/{id}", method = RequestMethod.DELETE, produces = "text/html")
    public String ParticipantController.delete(@PathVariable("id") Long id, @RequestParam(value = "page", required = false) Integer page, @RequestParam(value = "size", required = false) Integer size, Model uiModel) {
        Participant participant = participantService.findParticipant(id);
        participantService.deleteParticipant(participant);
        uiModel.asMap().clear();
        uiModel.addAttribute("page", (page == null) ? "1" : page.toString());
        uiModel.addAttribute("size", (size == null) ? "10" : size.toString());
        return "redirect:/participants";
    }
    
    void ParticipantController.addDateTimeFormatPatterns(Model uiModel) {
        uiModel.addAttribute("participant_birthdate_date_format", DateTimeFormat.patternForStyle("M-", LocaleContextHolder.getLocale()));
    }
    
    void ParticipantController.populateEditForm(Model uiModel, Participant participant) {
        uiModel.addAttribute("participant", participant);
        addDateTimeFormatPatterns(uiModel);
        uiModel.addAttribute("countrys", Country.findAllCountrys());
        uiModel.addAttribute("particevents", particEventService.findAllParticEvents());
        uiModel.addAttribute("particlaps", particLapService.findAllParticLaps());
        uiModel.addAttribute("particphases", particPhaseService.findAllParticPhases());
        uiModel.addAttribute("particraces", particRaceService.findAllParticRaces());
        uiModel.addAttribute("genders", Arrays.asList(Gender.values()));
    }
    
    String ParticipantController.encodeUrlPathSegment(String pathSegment, HttpServletRequest httpServletRequest) {
        String enc = httpServletRequest.getCharacterEncoding();
        if (enc == null) {
            enc = WebUtils.DEFAULT_CHARACTER_ENCODING;
        }
        try {
            pathSegment = UriUtils.encodePathSegment(pathSegment, enc);
        } catch (UnsupportedEncodingException uee) {}
        return pathSegment;
    }
    
}
