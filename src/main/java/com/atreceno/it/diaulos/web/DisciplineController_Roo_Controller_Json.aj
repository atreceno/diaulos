// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.atreceno.it.diaulos.web;

import com.atreceno.it.diaulos.domain.Discipline;
import com.atreceno.it.diaulos.web.DisciplineController;
import java.util.List;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

privileged aspect DisciplineController_Roo_Controller_Json {
    
    @RequestMapping(value = "/{code}", headers = "Accept=application/json")
    @ResponseBody
    public ResponseEntity<String> DisciplineController.showJson(@PathVariable("code") String code) {
        Discipline discipline = Discipline.findDiscipline(code);
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json; charset=utf-8");
        if (discipline == null) {
            return new ResponseEntity<String>(headers, HttpStatus.NOT_FOUND);
        }
        return new ResponseEntity<String>(discipline.toJson(), headers, HttpStatus.OK);
    }
    
    @RequestMapping(headers = "Accept=application/json")
    @ResponseBody
    public ResponseEntity<String> DisciplineController.listJson() {
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json; charset=utf-8");
        List<Discipline> result = Discipline.findAllDisciplines();
        return new ResponseEntity<String>(Discipline.toJsonArray(result), headers, HttpStatus.OK);
    }
    
    @RequestMapping(method = RequestMethod.POST, headers = "Accept=application/json")
    public ResponseEntity<String> DisciplineController.createFromJson(@RequestBody String json) {
        Discipline discipline = Discipline.fromJsonToDiscipline(json);
        discipline.persist();
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json");
        return new ResponseEntity<String>(headers, HttpStatus.CREATED);
    }
    
    @RequestMapping(value = "/jsonArray", method = RequestMethod.POST, headers = "Accept=application/json")
    public ResponseEntity<String> DisciplineController.createFromJsonArray(@RequestBody String json) {
        for (Discipline discipline: Discipline.fromJsonArrayToDisciplines(json)) {
            discipline.persist();
        }
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json");
        return new ResponseEntity<String>(headers, HttpStatus.CREATED);
    }
    
    @RequestMapping(method = RequestMethod.PUT, headers = "Accept=application/json")
    public ResponseEntity<String> DisciplineController.updateFromJson(@RequestBody String json) {
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json");
        Discipline discipline = Discipline.fromJsonToDiscipline(json);
        if (discipline.merge() == null) {
            return new ResponseEntity<String>(headers, HttpStatus.NOT_FOUND);
        }
        return new ResponseEntity<String>(headers, HttpStatus.OK);
    }
    
    @RequestMapping(value = "/jsonArray", method = RequestMethod.PUT, headers = "Accept=application/json")
    public ResponseEntity<String> DisciplineController.updateFromJsonArray(@RequestBody String json) {
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json");
        for (Discipline discipline: Discipline.fromJsonArrayToDisciplines(json)) {
            if (discipline.merge() == null) {
                return new ResponseEntity<String>(headers, HttpStatus.NOT_FOUND);
            }
        }
        return new ResponseEntity<String>(headers, HttpStatus.OK);
    }
    
    @RequestMapping(value = "/{code}", method = RequestMethod.DELETE, headers = "Accept=application/json")
    public ResponseEntity<String> DisciplineController.deleteFromJson(@PathVariable("code") String code) {
        Discipline discipline = Discipline.findDiscipline(code);
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json");
        if (discipline == null) {
            return new ResponseEntity<String>(headers, HttpStatus.NOT_FOUND);
        }
        discipline.remove();
        return new ResponseEntity<String>(headers, HttpStatus.OK);
    }
    
    @RequestMapping(params = "find=ByCodeEquals", headers = "Accept=application/json")
    @ResponseBody
    public ResponseEntity<String> DisciplineController.jsonFindDisciplinesByCodeEquals(@RequestParam("code") String code) {
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json; charset=utf-8");
        return new ResponseEntity<String>(Discipline.toJsonArray(Discipline.findDisciplinesByCodeEquals(code).getResultList()), headers, HttpStatus.OK);
    }
    
    @RequestMapping(params = "find=ByNameLike", headers = "Accept=application/json")
    @ResponseBody
    public ResponseEntity<String> DisciplineController.jsonFindDisciplinesByNameLike(@RequestParam("name") String name) {
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json; charset=utf-8");
        return new ResponseEntity<String>(Discipline.toJsonArray(Discipline.findDisciplinesByNameLike(name).getResultList()), headers, HttpStatus.OK);
    }
    
}
