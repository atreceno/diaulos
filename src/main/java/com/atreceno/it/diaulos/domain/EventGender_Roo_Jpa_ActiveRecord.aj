// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.atreceno.it.diaulos.domain;

import com.atreceno.it.diaulos.domain.EventGender;
import java.util.List;
import javax.persistence.EntityManager;
import javax.persistence.PersistenceContext;
import org.springframework.transaction.annotation.Transactional;

privileged aspect EventGender_Roo_Jpa_ActiveRecord {
    
    @PersistenceContext
    transient EntityManager EventGender.entityManager;
    
    public static final EntityManager EventGender.entityManager() {
        EntityManager em = new EventGender().entityManager;
        if (em == null) throw new IllegalStateException("Entity manager has not been injected (is the Spring Aspects JAR configured as an AJC/AJDT aspects library?)");
        return em;
    }
    
    public static long EventGender.countEventGenders() {
        return entityManager().createQuery("SELECT COUNT(o) FROM EventGender o", Long.class).getSingleResult();
    }
    
    public static List<EventGender> EventGender.findAllEventGenders() {
        return entityManager().createQuery("SELECT o FROM EventGender o", EventGender.class).getResultList();
    }
    
    public static EventGender EventGender.findEventGender(String code_) {
        if (code_ == null || code_.length() == 0) return null;
        return entityManager().find(EventGender.class, code_);
    }
    
    public static List<EventGender> EventGender.findEventGenderEntries(int firstResult, int maxResults) {
        return entityManager().createQuery("SELECT o FROM EventGender o", EventGender.class).setFirstResult(firstResult).setMaxResults(maxResults).getResultList();
    }
    
    @Transactional
    public void EventGender.persist() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.persist(this);
    }
    
    @Transactional
    public void EventGender.remove() {
        if (this.entityManager == null) this.entityManager = entityManager();
        if (this.entityManager.contains(this)) {
            this.entityManager.remove(this);
        } else {
            EventGender attached = EventGender.findEventGender(this.code_);
            this.entityManager.remove(attached);
        }
    }
    
    @Transactional
    public void EventGender.flush() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.flush();
    }
    
    @Transactional
    public void EventGender.clear() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.clear();
    }
    
    @Transactional
    public EventGender EventGender.merge() {
        if (this.entityManager == null) this.entityManager = entityManager();
        EventGender merged = this.entityManager.merge(this);
        this.entityManager.flush();
        return merged;
    }
    
}
