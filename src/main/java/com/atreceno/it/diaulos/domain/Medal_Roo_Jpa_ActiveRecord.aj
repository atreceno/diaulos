// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.atreceno.it.diaulos.domain;

import com.atreceno.it.diaulos.domain.Medal;
import java.util.List;
import javax.persistence.EntityManager;
import javax.persistence.PersistenceContext;
import org.springframework.transaction.annotation.Transactional;

privileged aspect Medal_Roo_Jpa_ActiveRecord {
    
    @PersistenceContext
    transient EntityManager Medal.entityManager;
    
    public static final EntityManager Medal.entityManager() {
        EntityManager em = new Medal().entityManager;
        if (em == null) throw new IllegalStateException("Entity manager has not been injected (is the Spring Aspects JAR configured as an AJC/AJDT aspects library?)");
        return em;
    }
    
    public static long Medal.countMedals() {
        return entityManager().createQuery("SELECT COUNT(o) FROM Medal o", Long.class).getSingleResult();
    }
    
    public static List<Medal> Medal.findAllMedals() {
        return entityManager().createQuery("SELECT o FROM Medal o", Medal.class).getResultList();
    }
    
    public static Medal Medal.findMedal(String code_) {
        if (code_ == null || code_.length() == 0) return null;
        return entityManager().find(Medal.class, code_);
    }
    
    public static List<Medal> Medal.findMedalEntries(int firstResult, int maxResults) {
        return entityManager().createQuery("SELECT o FROM Medal o", Medal.class).setFirstResult(firstResult).setMaxResults(maxResults).getResultList();
    }
    
    @Transactional
    public void Medal.persist() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.persist(this);
    }
    
    @Transactional
    public void Medal.remove() {
        if (this.entityManager == null) this.entityManager = entityManager();
        if (this.entityManager.contains(this)) {
            this.entityManager.remove(this);
        } else {
            Medal attached = Medal.findMedal(this.code_);
            this.entityManager.remove(attached);
        }
    }
    
    @Transactional
    public void Medal.flush() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.flush();
    }
    
    @Transactional
    public void Medal.clear() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.clear();
    }
    
    @Transactional
    public Medal Medal.merge() {
        if (this.entityManager == null) this.entityManager = entityManager();
        Medal merged = this.entityManager.merge(this);
        this.entityManager.flush();
        return merged;
    }
    
}
